// timing defintions
#define     WHOLE_BEAT 16
#define      HALF_BEAT WHOLE_BEAT / 2
#define   QUARTER_BEAT WHOLE_BEAT / 4
#define    EIGHTH_BEAT WHOLE_BEAT / 8
#define SIXTEENTH_BEAT WHOLE_BEAT / 16
#define    DOUBLE_BEAT WHOLE_BEAT * 2

// patterns and time
// first column is the 8bit binary animation state
// second column is the duration it should hold on
byte patterns[] = {
  B11111111, WHOLE_BEAT,
  B00000000, WHOLE_BEAT,
  B11111111, WHOLE_BEAT,
  B00000000, WHOLE_BEAT,
  
  // 4
  
  B11000011, HALF_BEAT,
  B00111100, HALF_BEAT,
  B11000011, HALF_BEAT,
  B00111100, HALF_BEAT,
  B11000011, HALF_BEAT,
  B00111100, HALF_BEAT,
  B11000011, HALF_BEAT,
  B00111100, HALF_BEAT,
  
  // 4
  
  B00000000, EIGHTH_BEAT,
  B00000010, EIGHTH_BEAT,
  B00000100, EIGHTH_BEAT,
  B00001000, EIGHTH_BEAT,
  B00010000, EIGHTH_BEAT,
  B00100000, EIGHTH_BEAT,
  B01000000, EIGHTH_BEAT,
  B10000000, EIGHTH_BEAT,
  B10000000, WHOLE_BEAT,
  B10000000, EIGHTH_BEAT,
  B01000000, EIGHTH_BEAT,
  B00100000, EIGHTH_BEAT,
  B00010000, EIGHTH_BEAT,
  B00001000, EIGHTH_BEAT,
  B00000100, EIGHTH_BEAT,
  B00000010, EIGHTH_BEAT,
  B00000001, EIGHTH_BEAT,
  B00000001, WHOLE_BEAT,
  
  // 4
  
  B00000000, EIGHTH_BEAT,
  B00000010, EIGHTH_BEAT,
  B00000100, EIGHTH_BEAT,
  B00001000, EIGHTH_BEAT,
  B00010000, EIGHTH_BEAT,
  B00100000, EIGHTH_BEAT,
  B01000000, EIGHTH_BEAT,
  B10000000, EIGHTH_BEAT,
  B10000000, WHOLE_BEAT,
  B10000000, EIGHTH_BEAT,
  B01000000, EIGHTH_BEAT,
  B00100000, EIGHTH_BEAT,
  B00010000, EIGHTH_BEAT,
  B00001000, EIGHTH_BEAT,
  B00000100, EIGHTH_BEAT,
  B00000010, EIGHTH_BEAT,
  B00000001, EIGHTH_BEAT,
  B00000001, WHOLE_BEAT,
  
  // 4
  
  B00000000, EIGHTH_BEAT,
  B00000010, EIGHTH_BEAT,
  B00000100, EIGHTH_BEAT,
  B00001000, EIGHTH_BEAT,
  B00010000, EIGHTH_BEAT,
  B00100000, EIGHTH_BEAT,
  B01000000, EIGHTH_BEAT,
  B10000000, EIGHTH_BEAT,
  B10000000, WHOLE_BEAT,
  B10000000, EIGHTH_BEAT,
  B01000000, EIGHTH_BEAT,
  B00100000, EIGHTH_BEAT,
  B00010000, EIGHTH_BEAT,
  B00001000, EIGHTH_BEAT,
  B00000100, EIGHTH_BEAT,
  B00000010, EIGHTH_BEAT,
  B00000001, EIGHTH_BEAT,
  B00000001, WHOLE_BEAT,
  
  // 4
  
  B11110000, HALF_BEAT,
  B00001111, HALF_BEAT,
  B11110000, HALF_BEAT,
  B00001111, HALF_BEAT,
  B11110000, HALF_BEAT,
  B00001111, HALF_BEAT,
  B11110000, HALF_BEAT,
  B00001111, HALF_BEAT,
  
  // 4
  
  B11110000, HALF_BEAT,
  B00001111, HALF_BEAT,
  B11111111, HALF_BEAT,
  B00000000, HALF_BEAT,
  B11111111, HALF_BEAT,
  B00000000, HALF_BEAT,
  B11110000, HALF_BEAT,
  B00001111, HALF_BEAT,
  
  // 4
  
  B10000001, QUARTER_BEAT,
  B01000010, QUARTER_BEAT,
  B00100100, QUARTER_BEAT,
  B00011000, QUARTER_BEAT,
  B00100100, QUARTER_BEAT,
  B01000010, QUARTER_BEAT,
  B10000001, QUARTER_BEAT,
  B00000000, QUARTER_BEAT,
  B10000001, QUARTER_BEAT,
  B01000010, QUARTER_BEAT,
  B00100100, QUARTER_BEAT,
  B00011000, QUARTER_BEAT,
  B00100100, QUARTER_BEAT,
  B01000010, QUARTER_BEAT,
  B10000001, QUARTER_BEAT,
  B00000000, QUARTER_BEAT
};
